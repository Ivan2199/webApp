{"ast":null,"code":"var _s = $RefreshSig$();\nconst ProfileProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [profileData, setProfileData] = useState(null);\n  const [loggedInUserID, setLoggedInUserID] = useState(null);\n  useEffect(() => {\n    const fetchProfileData = async () => {\n      try {\n        const token = localStorage.getItem(\"token\"); // Retrieve token from localStorage\n\n        if (!token) {\n          throw new Error(\"No token found\");\n        }\n        const response = await axios.get(\"http://localhost:8000/user/getLoggedInUser/\", {\n          headers: {\n            Authorization: token\n          }\n        });\n        const loggedInUserID = response.data.userId;\n        setLoggedInUserID(loggedInUserID);\n        const profileResponse = await axios.get(`http://localhost:8000/user/getuser/${loggedInUserID}`);\n        setProfileData(profileResponse.data);\n      } catch (error) {\n        console.log(error);\n        // Handle the error or display an appropriate message\n      }\n    };\n\n    fetchProfileData();\n  }, []);\n\n  // Rest of the code\n};\n_s(ProfileProvider, \"ykHrh+MpG+VTRiYeufOT7f7f+hM=\");\n_c = ProfileProvider;\nvar _c;\n$RefreshReg$(_c, \"ProfileProvider\");","map":{"version":3,"names":["ProfileProvider","_ref","_s","children","profileData","setProfileData","useState","loggedInUserID","setLoggedInUserID","useEffect","fetchProfileData","token","localStorage","getItem","Error","response","axios","get","headers","Authorization","data","userId","profileResponse","error","console","log","_c","$RefreshReg$"],"sources":["C:/Users/ivana/Desktop/Footer/client/src/components/Profile.js"],"sourcesContent":["const ProfileProvider = ({ children }) => {\r\n  const [profileData, setProfileData] = useState(null);\r\n  const [loggedInUserID, setLoggedInUserID] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchProfileData = async () => {\r\n      try {\r\n        const token = localStorage.getItem(\"token\"); // Retrieve token from localStorage\r\n\r\n        if (!token) {\r\n          throw new Error(\"No token found\");\r\n        }\r\n\r\n        const response = await axios.get(\r\n          \"http://localhost:8000/user/getLoggedInUser/\",\r\n          {\r\n            headers: {\r\n              Authorization: token,\r\n            },\r\n          }\r\n        );\r\n\r\n        const loggedInUserID = response.data.userId;\r\n        setLoggedInUserID(loggedInUserID);\r\n\r\n        const profileResponse = await axios.get(\r\n          `http://localhost:8000/user/getuser/${loggedInUserID}`\r\n        );\r\n        setProfileData(profileResponse.data);\r\n      } catch (error) {\r\n        console.log(error);\r\n        // Handle the error or display an appropriate message\r\n      }\r\n    };\r\n\r\n    fetchProfileData();\r\n  }, []);\r\n\r\n  // Rest of the code\r\n};\r\n"],"mappings":";AAAA,MAAMA,eAAe,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACnC,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGF,QAAQ,CAAC,IAAI,CAAC;EAE1DG,SAAS,CAAC,MAAM;IACd,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;QAE7C,IAAI,CAACF,KAAK,EAAE;UACV,MAAM,IAAIG,KAAK,CAAC,gBAAgB,CAAC;QACnC;QAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAC9B,6CAA6C,EAC7C;UACEC,OAAO,EAAE;YACPC,aAAa,EAAER;UACjB;QACF,CACF,CAAC;QAED,MAAMJ,cAAc,GAAGQ,QAAQ,CAACK,IAAI,CAACC,MAAM;QAC3Cb,iBAAiB,CAACD,cAAc,CAAC;QAEjC,MAAMe,eAAe,GAAG,MAAMN,KAAK,CAACC,GAAG,CACpC,sCAAqCV,cAAe,EACvD,CAAC;QACDF,cAAc,CAACiB,eAAe,CAACF,IAAI,CAAC;MACtC,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB;MACF;IACF,CAAC;;IAEDb,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;AACF,CAAC;AAACR,EAAA,CAvCIF,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}